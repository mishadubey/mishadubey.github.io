{"version":3,"sources":["pages/tasks/wrapper.tsx","store/hooks.ts","hooks/useQueryParam.ts","pages/tasks/search.tsx","pages/tasks/list.tsx","services/task.ts","pages/tasks/index.tsx","layouts/header/index.tsx","layouts/footer/index.tsx","layouts/index.tsx"],"names":["Wrapper","children","className","useAppSelector","useSelector","getQuery","window","URLSearchParams","location","search","useQueryParam","key","defaultVal","useState","get","getQueryStringVal","query","setQuery","newVal","trim","set","delete","protocol","pathname","host","queryString","toString","newUrl","history","pushState","Search","dispatch","useDispatch","formDataState","selectFormDataState","titleQueryParam","setTitleQueryParam","statusQueryParam","setStatusQueryParam","dueDateFromQueryParam","setDueDateFromQueryParam","dueDateToQueryParam","setDueDateToQueryParam","title","setTitle","status","setStatus","parse","Date","dueDateFrom","setDueDateFrom","dueDateTo","setDueDateTo","formData","setFormData","useEffect","format","formDataNewState","setFormDataStore","htmlFor","type","name","id","value","onChange","e","target","autoComplete","selected","date","onClick","clearFormDataStore","List","tasks","length","map","task","department","clsx","getUnixTime","dueDate","fromUnixTime","axios","data","post","put","Tasks","setTaskList","selectFormData","TaskService","getTasks","then","response","hideHeader","hideFooter","Header","Footer","Layout","defaultProps"],"mappings":"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","file":"static/js/5.9d20a9a5.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Wrapper: React.FC = ({ children }) => {\r\n  return (\r\n    <div className=\"min-h-screen flex flex-col py-6 sm:px-6 lg:px-8\">\r\n      {children}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Wrapper;\r\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux'\r\nimport type { RootState, AppDispatch } from './index'\r\n\r\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\r\nexport const useAppDispatch = () => useDispatch<AppDispatch>()\r\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector","import {useState} from 'react';\r\n\r\nconst getQuery = () => {\r\n  if (typeof window !== 'undefined') {\r\n    return new URLSearchParams(window.location.search);\r\n  }\r\n  return new URLSearchParams();\r\n};\r\n\r\nconst getQueryStringVal = (key: string): string | null => {\r\n  return getQuery().get(key);\r\n};\r\n\r\nconst useQueryParam = (\r\n  key: string,\r\n  defaultVal: string\r\n): [string, (val: string) => void] => {\r\n  const [query, setQuery] = useState(getQueryStringVal(key) || defaultVal);\r\n\r\n  const updateUrl = (newVal: string) => {\r\n    setQuery(newVal);\r\n\r\n    const query = getQuery();\r\n\r\n    if (newVal.trim() !== '') {\r\n      query.set(key, newVal);\r\n    } else {\r\n      query.delete(key);\r\n    }\r\n\r\n    if (typeof window !== 'undefined') {\r\n      const {protocol, pathname, host} = window.location;\r\n      const queryString = query.toString();\r\n      const newUrl = `${protocol}//${host}${pathname}${queryString ? `?${queryString}` : ``}`;\r\n      window.history.pushState({}, '', newUrl);\r\n    }\r\n  };\r\n\r\n  return [query, updateUrl];\r\n};\r\n\r\nexport default useQueryParam;\r\n","import React, { ChangeEvent, useEffect, useState } from 'react';\r\nimport DatePicker from 'react-datepicker';\r\nimport 'react-datepicker/dist/react-datepicker.css';\r\nimport { useAppDispatch, useAppSelector } from '../../store/hooks';\r\nimport { setFormData as setFormDataStore, clearFormData as clearFormDataStore, selectFormDataState } from '../../store/slices/tasks';\r\nimport format from 'date-fns/format';\r\nimport parse from 'date-fns/parse';\r\nimport useQueryParam from '../../hooks/useQueryParam';\r\n\r\nconst Search: React.FC = () => {\r\n  const dispatch = useAppDispatch();\r\n  const formDataState = useAppSelector(selectFormDataState);\r\n\r\n  const [titleQueryParam, setTitleQueryParam] = useQueryParam('title', '');\r\n  const [statusQueryParam, setStatusQueryParam] = useQueryParam('status', '');\r\n  const [dueDateFromQueryParam, setDueDateFromQueryParam] = useQueryParam('dueDateFrom', '');\r\n  const [dueDateToQueryParam, setDueDateToQueryParam] = useQueryParam('dueDateTo', '');\r\n  const [title, setTitle] = useState<string>(titleQueryParam);\r\n  const [status, setStatus] = useState<string>(statusQueryParam);\r\n  const [dueDateFrom, setDueDateFrom] = useState<Date | null>(dueDateFromQueryParam ? parse(dueDateFromQueryParam + ' 00:00:00', 'MM/dd/yyyy HH:mm:ss', new Date()) : null);\r\n  const [dueDateTo, setDueDateTo] = useState<Date | null>(dueDateToQueryParam ? parse(dueDateToQueryParam + ' 00:00:00', 'MM/dd/yyyy HH:mm:ss', new Date()) : null);\r\n  const [formData, setFormData] = useState<Object>({});\r\n\r\n  useEffect(() => {\r\n    setFormData({\r\n      title,\r\n      status,\r\n      dueDateFrom: dueDateFrom ? format(dueDateFrom, 'MM/dd/yyyy') : null,\r\n      dueDateTo: dueDateTo ? format(dueDateTo, 'MM/dd/yyyy') : null,\r\n    });\r\n  }, [title, status, dueDateFrom, dueDateTo]);\r\n\r\n  useEffect(() => {\r\n    if (title || status || dueDateFrom || dueDateTo) {\r\n      const formDataNewState = {\r\n        title,\r\n        status,\r\n        dueDateFrom: dueDateFrom ? format(dueDateFrom, 'MM/dd/yyyy') : null,\r\n        dueDateTo: dueDateTo ? format(dueDateTo, 'MM/dd/yyyy') : null,\r\n      }\r\n      setFormData(formDataNewState);\r\n      dispatch(setFormDataStore(formDataNewState));\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    setTitleQueryParam(title);\r\n    setStatusQueryParam(status);\r\n    setDueDateFromQueryParam(dueDateFrom ? format(dueDateFrom, 'MM/dd/yyyy') : '');\r\n    setDueDateToQueryParam(dueDateTo ? format(dueDateTo, 'MM/dd/yyyy') : '');\r\n  }, [formDataState]);\r\n\r\n\r\n  const clearHandler = () => {\r\n    setTitle('');\r\n    setStatus('');\r\n    setDueDateFrom(null);\r\n    setDueDateTo(null);\r\n    setFormData({});\r\n    dispatch(clearFormDataStore({}));\r\n  }\r\n\r\n  const submitHandler = () => {\r\n    dispatch(setFormDataStore(formData));\r\n  }\r\n\r\n  return (\r\n    <div className=\"bg-white overflow-hidden shadow rounded-lg divide-y divide-gray-100\">\r\n      <div className=\"bg-gray-50 px-4 py-5 sm:px-6\">\r\n        <h2 className=\"text-xl leading-6 font-medium text-gray-900\">\r\n          Filters\r\n        </h2>\r\n      </div>\r\n      <div className=\"px-4 py-4 sm:px-6\">\r\n        <div className=\"grid grid-cols-1 gap-y-6 gap-x-4 sm:grid-cols-12\">\r\n          <div className=\"sm:col-span-3\">\r\n            <label htmlFor=\"name\" className=\"block text-sm font-semibold text-gray-700\">\r\n              Name\r\n            </label>\r\n            <div className=\"mt-1\">\r\n              <input\r\n                type=\"text\"\r\n                name=\"name\"\r\n                id=\"name\"\r\n                value={title}\r\n                className=\"shadow-sm focus:ring-indigo-500 focus:border-indigo-500 block w-full sm:text-sm border-gray-300 rounded-md\"\r\n                onChange={(e: ChangeEvent<HTMLInputElement>) => setTitle(e.target.value)}\r\n              />\r\n            </div>\r\n          </div>\r\n          <div className=\"sm:col-span-3\">\r\n            <label htmlFor=\"status\" className=\"block text-sm font-semibold text-gray-700\">\r\n              Status\r\n            </label>\r\n            <div className=\"mt-1\">\r\n              <select\r\n                id=\"status\"\r\n                name=\"status\"\r\n                value={status}\r\n                autoComplete=\"status\"\r\n                className=\"shadow-sm focus:ring-indigo-500 focus:border-indigo-500 block w-full sm:text-sm border-gray-300 rounded-md\"\r\n                onChange={(e: ChangeEvent<HTMLSelectElement>) => setStatus(e.target.value)}\r\n              >\r\n                <option></option>\r\n                <option>To Do</option>\r\n                <option>In Progress</option>\r\n                <option>Internal QA</option>\r\n                <option>Client Review</option>\r\n                <option>Done</option>\r\n              </select>\r\n            </div>\r\n          </div>\r\n          <div className=\"sm:col-span-3\">\r\n            <label htmlFor=\"zip\" className=\"block text-sm font-semibold text-gray-700\">\r\n              Due Date (From)\r\n            </label>\r\n            <div className=\"mt-1\">\r\n              <DatePicker\r\n                selected={dueDateFrom}\r\n                onChange={(date: Date | null) => setDueDateFrom(date)}\r\n                className=\"shadow-sm focus:ring-indigo-500 focus:border-indigo-500 block w-full sm:text-sm border-gray-300 rounded-md\"\r\n              />\r\n            </div>\r\n          </div>\r\n          <div className=\"sm:col-span-3\">\r\n            <label className=\"block text-sm font-semibold text-gray-700\">\r\n              Due Date (To)\r\n            </label>\r\n            <div className=\"mt-1\">\r\n              <DatePicker\r\n                selected={dueDateTo}\r\n                onChange={(date: Date | null) => setDueDateTo(date)}\r\n                className=\"shadow-sm focus:ring-indigo-500 focus:border-indigo-500 block w-full sm:text-sm border-gray-300 rounded-md\"\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"mt-6 pt-6 border-t border-gray-200\">\r\n          <div className=\"flex justify-center\">\r\n            <button\r\n              type=\"button\"\r\n              className=\"bg-white py-2 px-4 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500\"\r\n              onClick={clearHandler}\r\n            >\r\n              Clear\r\n            </button>\r\n            <button\r\n              type=\"submit\"\r\n              className=\"ml-3 inline-flex justify-center py-2 px-4 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500\"\r\n              onClick={submitHandler}\r\n            >\r\n              Apply\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Search;\r\n","import React from 'react';\r\nimport ITask from '../../types/task';\r\nimport format from 'date-fns/format';\r\nimport fromUnixTime from 'date-fns/fromUnixTime';\r\nimport getUnixTime from 'date-fns/getUnixTime';\r\nimport clsx from 'clsx';\r\nimport { Users, Clock } from 'react-feather';\r\n\r\ninterface IProps {\r\n  tasks: Array<ITask>;\r\n}\r\n\r\nconst List: React.FC<IProps> = ({ tasks }) => {\r\n  return (\r\n    <div className=\"mt-8 bg-white overflow-hidden shadow rounded-lg divide-y divide-gray-100\">\r\n      <div className=\"bg-gray-50 px-4 py-5 sm:px-6\">\r\n        <h2 className=\"text-xl leading-6 font-medium text-gray-900\">\r\n          Results\r\n        </h2>\r\n      </div>\r\n      <div className=\"px-4 py-4 sm:px-6\">\r\n          {tasks.length > 0 ?\r\n              <ul className=\"grid grid-cols-1 gap-4 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4\">\r\n                  {tasks.map((task: ITask) => (\r\n                      <li key={task.id}\r\n                          className=\"col-span-1 bg-white rounded-lg shadow divide-y divide-gray-200 hover:bg-gray-50\">\r\n                          <div className=\"px-4 py-4 sm:px-6\">\r\n                              <div className=\"flex items-center justify-between\">\r\n                                  <p className=\"text-sm font-semibold text-gray-700 truncate\">\r\n                                      {task.name}\r\n                                  </p>\r\n                                  <div className=\"ml-2 flex-shrink-0 flex\">\r\n                                      <span\r\n                                          className=\"inline-flex items-center px-2 py-0.5 rounded text-xs font-medium bg-blue-100 text-blue-800\">\r\n                                        {task.status}\r\n                                      </span>\r\n                                  </div>\r\n                              </div>\r\n                              <div className=\"mt-2 sm:flex sm:justify-between\">\r\n                                  <div className=\"sm:flex\">\r\n                                      <p className=\"flex items-center text-sm text-gray-500\">\r\n                                          <Users className=\"flex-shrink-0 mr-1.5 h-5 w-5 text-gray-400\"/>\r\n                                          {task.department}\r\n                                      </p>\r\n                                  </div>\r\n                                  <div className=\"mt-2 flex items-center text-sm text-gray-500 sm:mt-0\">\r\n                                      <Clock className={clsx(\r\n                                          'flex-shrink-0 mr-1.5 h-5 w-5',\r\n                                          getUnixTime(new Date()) > task.dueDate\r\n                                              ? 'text-red-400'\r\n                                              : 'text-green-400'\r\n                                      )}/>\r\n                                      <p>\r\n                                          {format(fromUnixTime(task.dueDate), 'MMM d, yyyy')}\r\n                                      </p>\r\n                                  </div>\r\n                              </div>\r\n                          </div>\r\n                      </li>\r\n                  ))}\r\n              </ul> :\r\n              <div className=\"text-base font-normal text-gray-700\">No records found for your search. Try different or less specific search terms.</div>\r\n          }\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default List;\r\n","import ITask from '../types/task';\r\nimport axios from 'axios';\r\n\r\nclass TaskService {\r\n  getTasks(formData: object) {\r\n    return axios.get<ITask[]>('/api/tasks', {\r\n      data: formData\r\n    });\r\n  }\r\n\r\n  getTask(id: string) {\r\n    return axios.get(`/api/tasks/${id}`);\r\n  }\r\n\r\n  createTask(data: ITask) {\r\n    return axios.post('/api/tasks', data);\r\n  }\r\n\r\n  updateTask(data: ITask, id: any) {\r\n    return axios.put(`/api/tasks/${id}`, data);\r\n  }\r\n\r\n  deleteTask(id: any) {\r\n    return axios.delete(`/api/tasks/${id}`);\r\n  }\r\n}\r\n\r\nexport default new TaskService();\r\n","import React, { useEffect, useState } from 'react';\r\nimport Layout from '../../layouts';\r\nimport Wrapper from './wrapper';\r\nimport Search from './search';\r\nimport List from './list';\r\nimport TaskService from '../../services/task';\r\nimport ITask from '../../types/task';\r\nimport { useAppSelector } from '../../store/hooks';\r\nimport {selectFormData, selectFormDataState} from '../../store/slices/tasks';\r\n\r\nconst Tasks: React.FC = () => {\r\n\r\n  const [tasks, setTaskList] = useState<ITask[]>([]);\r\n\r\n  const formData = useAppSelector(selectFormData);\r\n  const formDataState = useAppSelector(selectFormDataState);\r\n\r\n  useEffect(() => {\r\n    TaskService.getTasks(formData)\r\n      .then(response => {\r\n        setTaskList(response.data);\r\n      });\r\n  }, [formDataState, formData]);\r\n\r\n  return (\r\n    <Layout hideHeader hideFooter>\r\n      <Wrapper>\r\n        <Search />\r\n        <List tasks={tasks} />\r\n      </Wrapper>\r\n    </Layout>\r\n  );\r\n};\r\n\r\nexport default Tasks;\r\n","import React from 'react';\r\n\r\nconst Header: React.FC = () => {\r\n  return <></>\r\n};\r\n\r\nexport default Header;\r\n","import React from 'react';\r\n\r\nconst Footer: React.FC = () => {\r\n    return <></>\r\n};\r\n\r\nexport default Footer;\r\n","import React from 'react';\r\nimport Header from './header';\r\nimport Footer from './footer';\r\n\r\ninterface IProps {\r\n  hideHeader?: boolean;\r\n  hideFooter?: boolean;\r\n}\r\n\r\nconst Layout: React.FC<IProps> = ({\r\n  children,\r\n  hideHeader,\r\n  hideFooter,\r\n}) => {\r\n  return (\r\n    <>\r\n      {!hideHeader && <Header />}\r\n      {children}\r\n      {!hideFooter && <Footer />}\r\n    </>\r\n    );\r\n};\r\n\r\nLayout.defaultProps = {\r\n  hideHeader: false,\r\n  hideFooter: false,\r\n};\r\n\r\nexport default Layout;\r\n"],"sourceRoot":""}